[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"


[project]
name = "kupka"
version = "0.0.1"
license = {file = "LICENSE"}
description = "A Flexible Computational Graph Library For Python"
authors = [{name = "Norvan Sahiner"}]
maintainers = [{name = "Norvan Sahiner"}]
requires-python = ">=3.10"
readme = "README.md"
classifiers = [
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Programming Language :: Python :: 3 :: Only',
    'Topic :: Software Development',
    'Topic :: Scientific/Engineering',
    'Typing :: Typed',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
]

dependencies = [
    "pydot",
]

[project.urls]
homepage = "https://github.com/norvan/kupka"
documentation = "https://github.com/norvan/kupka"
source = "https://github.com/norvan/kupka"
download = "https://pypi.org/project/kupka/#files"
tracker = "https://github.com/norvan/kupka/issues"
#"release notes" = "https://github.com/norvan/kupka/release"

[project.optional-dependencies]
viz = [
    "pydot",
]
dev = [
    "build",
    "twine",
    "tox",
    "mypy",
    "pytest",
    "mock",
    "ruff",
    "black",
    "isort",
]


[tool.setuptools.packages.find]
where = ["src"]
include = ["kupka*"]
namespaces = false


[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
packages = "kupka"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.ruff]
line-length = 120
indent-width = 4
# Assume Python 3.10
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]


[tool.ruff.lint]
extend-select = [
    "UP",  # pyupgrade
    "D",   # pydocstyle
]
ignore = [
    "D203",
    "D213",
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
